from telethon import TelegramClient
import time
import asyncio
from config import api_id, api_hash
from Templates import \
    Templates_AcademyPickBot,\
    Templates_hi_prof_bot, \
    Templates_kurtsevobot,\
    Templates_DadiRestBot, \
    Templates_TourPickBot

def time_is_out(msg):
    error = f"Error: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:'{msg}', –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
    return error


def check_AcademyPickBot(channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏ –¥–ª—è @AcademyPickBot"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    start_time = time.time()
    flag = False
    with TelegramClient('sessions/session1', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))# —Å–æ–æ–±—â–µ–Ω–∏—è
        if msgs[0].to_dict()['message'] != Templates_AcademyPickBot.answer_3():
            return time_is_out("–°–Ω–∏–º–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ...")
        if msgs[1].to_dict()['message'] != Templates_AcademyPickBot.answer_2():
            return time_is_out("–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ...")
        if msgs[2].to_dict()['message'] != Templates_AcademyPickBot.answer_1():
            return time_is_out("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_AcademyPickBot.answer_4():
            return time_is_out("–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_AcademyPickBot.answer_5():
            return time_is_out("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_AcademyPickBot.answer_6():
            return time_is_out("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_message(channel_username, '–≠—Ç–æ –±—ã–ª–æ –∫—Ä—É—Ç–æ'))
        time.sleep(20)
        end_time = time.time() - start_time
        while end_time < 420: # 7 –º–∏–Ω—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'] == Templates_AcademyPickBot.answer_10():
                flag = True
                break
        if flag:
            msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
            if msgs[0].to_dict()['message'] != Templates_AcademyPickBot.answer_10():
                return "Error:üëå –í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤!"
            if msgs[1].to_dict()['message'] != Templates_AcademyPickBot.answer_9():
                return "Error:(–í–∏–¥–µ–æ)"
        else:
            return "Error:–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
        return "Completed successfully"


def check_hi_prof_bot(channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏ –¥–ª—è @hi_prof_bot"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    start_time = time.time()
    flag = False
    with TelegramClient('sessions/session2', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_hi_prof_bot.answer_1():
            return time_is_out(" –ü—Ä–∏–≤–µ—Çüëã...")
        client.loop.run_until_complete(client.send_message(channel_username, '–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤–æ–∂–¥–µ–Ω–∏—è"'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_hi_prof_bot.answer_2():
            return time_is_out("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç..")    
        client.loop.run_until_complete(client.send_message(channel_username, '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))
        if msgs[0].to_dict()['message'] != Templates_hi_prof_bot.answer_5():
            return time_is_out("–°–Ω–∏–º–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ...")
        if msgs[1].to_dict()['message'] != Templates_hi_prof_bot.answer_4():
            return time_is_out("–ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∏–º...")
        if msgs[2].to_dict()['message'] != Templates_hi_prof_bot.answer_3():
            return time_is_out("–ù–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_hi_prof_bot.answer_6():
            return time_is_out("–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        end_time = time.time() - start_time
        while end_time < 420: # 7 –º–∏–Ω—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'][:21] == Templates_hi_prof_bot.answer_10():
                flag = True
                break
        if flag:
            msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
            if msgs[0].to_dict()['message'][:21] != Templates_hi_prof_bot.answer_10():
                return "Error:üëå –í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤!"
            if msgs[1].to_dict()['message'] != Templates_hi_prof_bot.answer_9():
                return "Error:(–í–∏–¥–µ–æ)"
        else:
            return "Error:–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
        return "Completed successfully"


def check_kurtsevobot(channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏ –¥–ª—è @kurtsevobot"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    start_time = time.time()
    flag = False
    with TelegramClient('sessions/session3', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))
        if msgs[0].to_dict()['message'] != Templates_kurtsevobot.answer_3():
            return time_is_out("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ...")
        if msgs[1].to_dict()['message'] != Templates_kurtsevobot.answer_2():
            return time_is_out("–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ...")
        if msgs[2].to_dict()['message'] != Templates_kurtsevobot.answer_1():
            return time_is_out("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_kurtsevobot.answer_4():
            return time_is_out("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        end_time = time.time() - start_time
        while end_time < 420: # 7 –º–∏–Ω—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'] == Templates_kurtsevobot.answer_8():
                flag = True
                break
        if flag:
            msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
            if msgs[0].to_dict()['message'] != Templates_kurtsevobot.answer_8():
                return "Error:üëå –í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤!"
            if msgs[1].to_dict()['message'] != Templates_kurtsevobot.answer_7():
                return "Error:(–í–∏–¥–µ–æ)"
        else:
            return "Error:–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
        return "Completed successfully"


def check_DadiRestBot(channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏ –¥–ª—è @DadiRestBot"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    start_time = time.time()
    flag = False
    with TelegramClient('sessions/session4', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
        if msgs[0].to_dict()['message'] != Templates_DadiRestBot.answer_2():
            return time_is_out("–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?...")
        if msgs[1].to_dict()['message'] != Templates_DadiRestBot.answer_1():
            return time_is_out("–ü—Ä–∏–≤–µ—Ç!...")
        client.loop.run_until_complete(client.send_message(channel_username, 'üé¨ –°–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ—Å–µ–ª—Ñ–∏ üé¨'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))
        if msgs[0].to_dict()['message'] != Templates_DadiRestBot.answer_5():
            return time_is_out("–°–Ω–∏–º–∏—Ç–µ/–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ...")
        if msgs[1].to_dict()['message'] != Templates_DadiRestBot.answer_4():
            return time_is_out("–ò—Ç–∞–∫, –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è...")
        if msgs[2].to_dict()['message'] != Templates_DadiRestBot.answer_3():
            return time_is_out("üëê –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_DadiRestBot.answer_6():
            return time_is_out("–û—Ç–ª–∏—á–Ω–æ! ü§≥ ...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        end_time = time.time() - start_time
        while end_time < 420: # 7 –º–∏–Ω—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'] == Templates_DadiRestBot.answer_10():
                flag = True
                break
        if flag:
            msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
            if msgs[0].to_dict()['message'] != Templates_DadiRestBot.answer_10():
                return "Error:üëå –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!"
            if msgs[1].to_dict()['message'] != Templates_DadiRestBot.answer_9():
                return "Error:(–í–∏–¥–µ–æ)"
        else:
            return "Errorr:–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
        return "Completed successfully"



def check_TourPickBot(channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏ –¥–ª—è @TourPickBot"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    start_time = time.time()
    flag = False
    with TelegramClient('sessions/session5', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))
        if msgs[0].to_dict()['message'] != Templates_TourPickBot.answer_3():
            return time_is_out("–°–Ω–∏–º–∏—Ç–µ –≤–∏–¥–µ–æ...")
        if msgs[1].to_dict()['message'] != Templates_TourPickBot.answer_2():
            return time_is_out("–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ...")
        if msgs[2].to_dict()['message'] != Templates_TourPickBot.answer_1():
            return time_is_out("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_TourPickBot.answer_4():
            return time_is_out("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_TourPickBot.answer_5():
            return time_is_out("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_message(channel_username, '–≠—Ç–æ –±—ã–ª–æ –∫—Ä—É—Ç–æ'))
        time.sleep(20)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
        if msgs[0].to_dict()['message'] != Templates_TourPickBot.answer_6():
            return time_is_out("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–µ–ª—Ñ–∏...")
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(20)
        end_time = time.time() - start_time
        while end_time < 420: # 7 –º–∏–Ω—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'] == Templates_TourPickBot.answer_10():
                flag = True
                break
        if flag:
            msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=2))
            if msgs[0].to_dict()['message'] != Templates_TourPickBot.answer_10():
                return "Error:üëå–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤!"
            if msgs[1].to_dict()['message'] != Templates_TourPickBot.answer_9():
                return "Error:(–í–∏–¥–µ–æ)"
        else:
            return "Error:–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å!"
        return "Completed successfully"


def all_message(channel_username, number):
    """–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    loop = asyncio.new_event_loop()
    with TelegramClient('sessions/all', api_id, api_hash, loop=loop) as client:
        row_msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=number))
        msgs = []
        for msg in row_msgs:
            msgs.append(msg.to_dict()['message'])
        return msgs


def send_errors_in_bot(inveite_link, text):
    """–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–∞—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    with TelegramClient('sessions/errors', api_id, api_hash, loop=loop) as client:
        channel = client.loop.run_until_complete(client.get_entity(inveite_link))
        client.loop.run_until_complete(client.send_message(channel, text))


def run(number, channel_username):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    number = int(number)
    if number == 101:
        return check_AcademyPickBot(channel_username)
    elif number == 201:
        return check_hi_prof_bot(channel_username)
    elif number == 301:
        return check_kurtsevobot(channel_username)
    elif number == 401:
        return check_DadiRestBot(channel_username)
    elif number == 501:
        return check_TourPickBot(channel_username)
    else :
        return

