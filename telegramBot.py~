# -*- coding: utf-8 -*- 
from telethon import TelegramClient
import time
import asyncio
from Templates import Templates, api_id, api_hash, channel_username


def checkComand(channel_username):
    loop = asyncio.new_event_loop()
    success_mass = 0
    with TelegramClient('new', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(2)
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=3))# –æ–¥–∏–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if msgs[2].to_dict()['message'] == Templates.answer_1():
            success_mass += 1
        if msgs[1].to_dict()['message'] == Templates.answer_2():
            success_mass += 1
        if msgs[0].to_dict()['message'] == Templates.answer_3():
            success_mass += 1
    if success_mass == 3:
        return "Completed successfully"
    return "Error in test"



def sendAll(channel_username):
    loop = asyncio.new_event_loop()
    start_time = time.time()
    with TelegramClient('new', api_id, api_hash, loop=loop) as client:
        client.loop.run_until_complete(client.send_message(channel_username, '/start'))
        time.sleep(2)
        client.loop.run_until_complete(client.send_file(channel_username, 'static/video/vid.mp4'))
        time.sleep(4)
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(4)
        client.loop.run_until_complete(client.send_file(channel_username, 'static/img/cars.jpg'))
        time.sleep(2)
        client.loop.run_until_complete(client.send_message(channel_username, '–≠—Ç–æ –±—ã–ª–æ –∫—Ä—É—Ç–æ'))
        end_time = time.time() - start_time
        while end_time < 240: # 4 –º–∏–Ω—É—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            msg = client.loop.run_until_complete(client.get_messages(channel_username, limit=1))
            end_time = time.time() - start_time
            if msg[0].to_dict()['message'] == Templates.answer_10():
                return True
        return False



def checkAll(channel_username):
    loop = asyncio.new_event_loop()
    with TelegramClient('new', api_id, api_hash, loop=loop) as client:
        msgs = client.loop.run_until_complete(client.get_messages(channel_username, limit=15))# –æ–¥–∏–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if msgs[14].to_dict()['message'] != Templates.answer_1():
            return "Error in >–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!..."
        if msgs[13].to_dict()['message'] != Templates.answer_2():
            return "Error in >–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ..."
        if msgs[12].to_dict()['message'] != Templates.answer_3():
            return "Error in >–°–Ω–∏–º–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ..."
        if msgs[10].to_dict()['message'] != Templates.answer_4():
            return "Error in >–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏..."
        if msgs[8].to_dict()['message'] != Templates.answer_5():
            return "Error in >–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–µ–ª—Ñ–∏..."
        if msgs[6].to_dict()['message'] != Templates.answer_6():
            return "Error in >–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Å–µ–ª—Ñ–∏..."
        if msgs[4].to_dict()['message'] != Templates.answer_7():
            return "Error in >–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω—Ç–∞–∂–∞..."
        if msgs[3].to_dict()['message'] != Templates.answer_8() and msgs[2].to_dict()['message'] != Templates.answer_8():
            return "Error in >–í —Ä–∞–±–æ—Ç–µ..."
        if msgs[1].to_dict()['message'] != Templates.answer_9():
            return "Error in >(–í–∏–¥–µ–æ)"
        if msgs[0].to_dict()['message'] != Templates.answer_10():
            return "Error in >üëå –í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤!"
        return "Completed successfully"


#print(checkComand(channel_username))
#print(checkAll(channel_username))